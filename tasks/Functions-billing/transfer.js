const { SubscriptionManager } = require("@chainlink/functions-toolkit")

const { networks } = require("../../networks")
const utils = require("../utils")

task("functions-sub-transfer", "Request ownership of an Functions subscription be transferred to a new address")
  .addParam("subid", "Subscription ID")
  .addParam("newowner", "Address of the new owner")
  .setAction(async (taskArgs) => {
    const subscriptionId = parseInt(taskArgs.subid)
    const newOwner = taskArgs.newowner
    const confirmations = networks[network.name].confirmations
    const txOptions = { confirmations }

    const functionsRouterAddress = networks[network.name]["functionsRouter"]
    const linkTokenAddress = networks[network.name]["linkToken"]

    const signer = (await ethers.getSigners())[0] // First wallet.

    await utils.prompt(
      `\nTransferring the subscription to a new owner will require generating a new signature for encrypted secrets.
Any previous encrypted secrets will no longer work with subscription ID ${subscriptionId} and must be regenerated by the new owner.`
    )

    const sm = new SubscriptionManager({ signer, linkTokenAddress, functionsRouterAddress })
    await sm.initialize()

    console.log(`\nRequesting transfer of subscription ${subscriptionId} to new owner ${newOwner}`)
    const requestTransferTx = await sm.requestSubscriptionTransfer({ subscriptionId, newOwner, txOptions })
    console.log(
      `Transfer request completed in Tx: ${requestTransferTx.transactionHash}. \nAccount ${newOwner} needs to accept transfer for it to complete.`
    )
  })
