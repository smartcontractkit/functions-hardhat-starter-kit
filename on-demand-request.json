{"source":"// This example shows how to calculate a continuously compounding interested rate.\n// This calculation would require significant on-chain gas, but is easy for a decentralized oracle network.\n\n// Arguments can be provided when a request is initated on-chain and used in the request source code as shown below\nconst principalAmount = parseInt(args[4]);\nconst APYTimes100 = parseInt(args[5]);\nconst APYAsDecimalPercentage = (APYTimes100 / 100) / 100;\n\nconst timeInYears = (1/12); // represents 1 month\nconst eulersNumber = 2.7183;\n\n// Continuouly-compounding interest formula: A = Pe^(rt)\nconst totalAmountAfterInterest = principalAmount * eulersNumber ** (APYAsDecimalPercentage * timeInYears);\n\n// The source code MUST return a Buffer or the request will return an error message\n// Use one of the following functions to convert to a Buffer representing the response bytes that are returned to the client smart contract:\n// - OCR2DR.encodeUint256\n// - OCR2DR.encodeInt256\n// - OCR2DR.encodeString\n// Or return a custom Buffer for a custom byte encoding\nreturn OCR2DR.encodeUint256(Math.round(totalAmountAfterInterest));","secrets":"0x93b35bdbfef6f878429b64e2503ddfe3021766f20ce34042850f2c52e19a70e31e1c568ec49ad87aedff2717128071cfdda18a43d1833e02581679f7b9c5e50e57a6bef5bce0e8bfb381838f97543fad1337c9411c01409e22f9e601b28f2ac3436cd8f69b0af235cc6ad5647f59e80b1ad0fcbf80d2b934dd35a6e3c5ecf8ac880fe122268db739d8e8d77bd8ce2729de0fe87babfaea418fad8e149bb26ddc595b96092fc31cf240b574f93ceec2e1d773a39328d6952eb3fcf17e7e87abe2860ef55c4fa8cef9b6a577ee8724f62f6c6cf8d710399df62d1f716b03c5442df7f562547c8addaac96ace942465f28a35f095e029a6f0d559fe9ca7c87d6dff0161da2c29d5d918a75bf4ba3973fd0e650e4c58bb91264097565182ac36cffc58bfd22f0acf97d7176e894a1ff49bb3d6","args":["1","bitcoin","btc-bitcoin","btc","1000000","450"]}